// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/25/2023 18:40:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mono_ciclo_mips
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mono_ciclo_mips_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg resetRegFile;
// wires                                               
wire [31:0] AluResul;
wire [31:0] DR1;
wire [31:0] DR2;
wire FlagZero;
wire [31:0] instruction_memory_out;
wire [31:0] program_counter;
wire [4:0] readAddr1_debug;
wire [4:0] readAddr2_debug;
wire regWrite_debug;
wire [3:0] ulaControlResult;
wire [4:0] writeAddr_debug;
wire [31:0] writeData_debug;

// assign statements (if any)                          
mono_ciclo_mips i1 (
// port map - connection between master ports and signals/registers   
	.AluResul(AluResul),
	.DR1(DR1),
	.DR2(DR2),
	.FlagZero(FlagZero),
	.clk(clk),
	.instruction_memory_out(instruction_memory_out),
	.program_counter(program_counter),
	.readAddr1_debug(readAddr1_debug),
	.readAddr2_debug(readAddr2_debug),
	.regWrite_debug(regWrite_debug),
	.resetRegFile(resetRegFile),
	.ulaControlResult(ulaControlResult),
	.writeAddr_debug(writeAddr_debug),
	.writeData_debug(writeData_debug)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// resetRegFile
initial
begin
	resetRegFile = 1'b0;
end 
endmodule

